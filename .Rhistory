.funs = ~purrr::map(.x = ., .f = ~.x %>%
dplyr::mutate(
probs = dplyr::if_else(
.data$batchvar == levels(data$.batchvar)[1],
true = 1 - .data$value,
false = .data$value))))
} else {
values <- values %>%
dplyr::mutate_at(.vars = dplyr::vars(.data$num, .data$den),
.funs =
~purrr::map(.x = .,
.f = ~.x %>%
tidyr::pivot_longer(-.data$.batchvar,
names_to = "batch", values_to = "prob") %>%
dplyr::filter(.data$batch == .data$.batchvar) %>%
dplyr::pull(.data$prob)))
}
if(length(levels(data$.batchvar) == 2)) {
values <- values %>%
dplyr::mutate_at(.vars = dplyr::vars(.data$num, .data$den),
.funs = ~purrr::map(.x = ., .f = ~.x %>%
dplyr::mutate(
probs = dplyr::if_else(
.data$.batchvar == levels(data$.batchvar)[1],
true = 1 - .data$value,
false = .data$value))))
} else {
values <- values %>%
dplyr::mutate_at(.vars = dplyr::vars(.data$num, .data$den),
.funs =
~purrr::map(.x = .,
.f = ~.x %>%
tidyr::pivot_longer(-.data$.batchvar,
names_to = "batch", values_to = "prob") %>%
dplyr::filter(.data$batch == .data$.batchvar) %>%
dplyr::pull(.data$prob)))
}
res <- data %>%
dplyr::rename(variable = dplyr::one_of(variable)) %>%
dplyr::filter(!is.na(.data$variable)) %>%
tidyr::nest(data = everything()) %>%
dplyr::mutate(
num = purrr::map(.x = .data$data,
.f = ~nnet::multinom(formula = .batchvar ~ 1,
data = .x, trace = FALSE)),
den = purrr::map(.x = .data$data,
.f = ~nnet::multinom(formula = stats::as.formula(
paste(".batchvar ~", confounders)),
data = .x, trace = FALSE)))
values <- res %>%
dplyr::mutate_at(.vars = dplyr::vars(.data$num, .data$den),
.funs = ~purrr::map(.x = ., .f = stats::predict, type = "probs") %>%
purrr::map(.x = ., .f = tibble::as_tibble) %>%
purrr::map2(.x = ., .y = .data$data,
.f = ~.x %>%
dplyr::mutate(.batchvar = .y %>%
purrr::pluck(".batchvar"))))
if(length(levels(data$.batchvar) == 2)) {
values <- values %>%
dplyr::mutate_at(.vars = dplyr::vars(.data$num, .data$den),
.funs = ~purrr::map(.x = ., .f = ~.x %>%
dplyr::mutate(
probs = dplyr::if_else(
.data$.batchvar == levels(data$.batchvar)[1],
true = 1 - .data$value,
false = .data$value))))
} else {
values <- values %>%
dplyr::mutate_at(.vars = dplyr::vars(.data$num, .data$den),
.funs =
~purrr::map(.x = .,
.f = ~.x %>%
tidyr::pivot_longer(-.data$.batchvar,
names_to = "batch", values_to = "prob") %>%
dplyr::filter(.data$batch == .data$.batchvar) %>%
dplyr::pull(.data$prob)))
}
View(values)
View(values[[3]][[1]])
levels(data$.batchvar)[1]
values <- res %>%
dplyr::mutate_at(.vars = dplyr::vars(.data$num, .data$den),
.funs = ~purrr::map(.x = ., .f = stats::predict, type = "probs") %>%
purrr::map(.x = ., .f = tibble::as_tibble) %>%
purrr::map2(.x = ., .y = .data$data,
.f = ~.x %>%
dplyr::mutate(.batchvar = .y %>%
purrr::pluck(".batchvar"))))
if(length(levels(data$.batchvar) == 2)) {
values <- values %>%
dplyr::mutate_at(.vars = dplyr::vars(.data$num, .data$den),
.funs = ~purrr::map(.x = ., .f = ~.x %>%
dplyr::mutate(
probs = dplyr::if_else(
as.character(.data$.batchvar) == as.character(levels(data$.batchvar)[1]),
true = 1 - .data$value,
false = .data$value))))
} else {
values <- values %>%
dplyr::mutate_at(.vars = dplyr::vars(.data$num, .data$den),
.funs =
~purrr::map(.x = .,
.f = ~.x %>%
tidyr::pivot_longer(-.data$.batchvar,
names_to = "batch", values_to = "prob") %>%
dplyr::filter(.data$batch == .data$.batchvar) %>%
dplyr::pull(.data$prob)))
}
as.character(levels(data$.batchvar)[1])
if(length(levels(data$.batchvar) == 2)) {
values <- values %>%
dplyr::mutate_at(.vars = dplyr::vars(.data$num, .data$den),
.funs = ~purrr::map(.x = ., .f = ~.x %>%
dplyr::mutate(
levelone = as.character(levels(data$.batchvar)[1]),
probs = dplyr::if_else(
as.character(.data$.batchvar) == .data$levelone,
true = 1 - .data$value,
false = .data$value))))
} else {
values <- values %>%
dplyr::mutate_at(.vars = dplyr::vars(.data$num, .data$den),
.funs =
~purrr::map(.x = .,
.f = ~.x %>%
tidyr::pivot_longer(-.data$.batchvar,
names_to = "batch",
values_to = "prob") %>%
dplyr::filter(.data$batch == .data$.batchvar) %>%
dplyr::pull(.data$prob)))
}
View(values)
View(values[[2]][[1]])
values[[2]][[1]]
values[[2]][[1]]$.batchvar
levels(values[[2]][[1]]$.batchvar)
if(length(levels(data$.batchvar) == 2)) {
values <- values %>%
dplyr::mutate_at(.vars = dplyr::vars(.data$num, .data$den),
.funs = ~purrr::map(.x = ., .f = ~.x %>%
dplyr::mutate(
probs = dplyr::if_else(
as.character(.data$.batchvar) == as.character(levels(.data$.batchvar)[1]),
true = 1 - .data$value,
false = .data$value))))
} else {
values <- values %>%
dplyr::mutate_at(.vars = dplyr::vars(.data$num, .data$den),
.funs =
~purrr::map(.x = .,
.f = ~.x %>%
tidyr::pivot_longer(-.data$.batchvar,
names_to = "batch",
values_to = "prob") %>%
dplyr::filter(.data$batch == .data$.batchvar) %>%
dplyr::pull(.data$prob)))
}
View(values)
View(values[[2]][[1]])
View(values[[3]][[1]])
if(length(levels(data$.batchvar) == 2)) {
values <- values %>%
dplyr::mutate_at(.vars = dplyr::vars(.data$num, .data$den),
.funs = ~purrr::map(.x = ., .f = ~.x %>%
dplyr::mutate(
probs = dplyr::if_else(
.data$.batchvar ==
levels(.data$.batchvar)[1],
true = 1 - .data$value,
false = .data$value))))
} else {
values <- values %>%
dplyr::mutate_at(.vars = dplyr::vars(.data$num, .data$den),
.funs =
~purrr::map(.x = .,
.f = ~.x %>%
tidyr::pivot_longer(-.data$.batchvar,
names_to = "batch",
values_to = "prob") %>%
dplyr::filter(.data$batch == .data$.batchvar) %>%
dplyr::pull(.data$prob)))
}
View(res)
View(values)
View(values[[3]][[1]])
rm(data)
rm(fit, res, values, confounders, markers, truncate, variable)
devtools::load_all(".")
adjust_batch(data = df, markers = biomarker, batch = tma, method = standardize, confounders = confo)
df <- df %>% dplyr::select(-.batchvar, -.id)
adjust_batch(data = df, markers = biomarker, batch = tma, method = standardize, confounders = confo)
devtools::load_all(".")
adjust_batch(data = df, markers = biomarker, batch = tma, method = standardize, confounders = confo)
adjust_batch(data = df, markers = biomarker, batch = tma, method = ipw, confounders = confo)
devtools::load_all(".")
adjust_batch(data = df, markers = biomarker, batch = tma, method = ipw, confounders = confo)
levels(c("a", "b"))
f <- factor(c("a", "b", "c"))
f
f[1:2]
factor(f[1:2])
devtools::load_all(".")
adjust_batch(data = df, markers = biomarker, batch = tma, method = ipw, confounders = confo)
adjust_batch(data = df %>% slice(1:20), markers = biomarker, batch = tma, method = ipw, confounders = confo)
adjust_batch(data = df %>% dplyr::slice(1:20), markers = biomarker, batch = tma, method = ipw, confounders = confo)
data <- df %>% dplyr::mutate(.id = 1:23, .batchvar = factor(tma))
variable <- "biomarker"
confounders <- "confo"
rm(f)
truncate <- c(0.25, 0.75)
res <- data %>%
dplyr::rename(variable = dplyr::one_of(variable)) %>%
dplyr::filter(!is.na(.data$variable)) %>%
tidyr::nest(data = everything()) %>%
dplyr::mutate(
num = purrr::map(.x = .data$data,
.f = ~nnet::multinom(formula = .batchvar ~ 1,
data = .x, trace = FALSE)),
den = purrr::map(.x = .data$data,
.f = ~nnet::multinom(formula = stats::as.formula(
paste(".batchvar ~", confounders)),
data = .x, trace = FALSE)))
View(res)
values <- res %>%
dplyr::mutate_at(.vars = dplyr::vars(.data$num, .data$den),
.funs = ~purrr::map(.x = ., .f = stats::predict, type = "probs") %>%
purrr::map(.x = ., .f = tibble::as_tibble) %>%
purrr::map2(.x = ., .y = .data$data,
.f = ~.x %>%
dplyr::mutate(.batchvar = .y %>%
purrr::pluck(".batchvar"))))
View(values)
View(values[[2]][[1]])
View(values[[3]][[1]])
if(length(levels(factor(data$.batchvar)) == 2)) {
values <- values %>%
dplyr::mutate_at(.vars = dplyr::vars(.data$num, .data$den),
.funs = ~purrr::map(.x = ., .f = ~.x %>%
dplyr::mutate(
probs = dplyr::if_else(
.data$.batchvar ==
levels(factor(.data$.batchvar))[1],
true = 1 - .data$value,
false = .data$value)) %>%
dplyr::pull(.data$probs)))
} else {
values <- values %>%
dplyr::mutate_at(.vars = dplyr::vars(.data$num, .data$den),
.funs =
~purrr::map(.x = .,
.f = ~.x %>%
tidyr::pivot_longer(-.data$.batchvar,
names_to = "batch",
values_to = "prob") %>%
dplyr::filter(.data$batch == .data$.batchvar) %>%
dplyr::pull(.data$prob)))
}
levels(factor(data$.batchvar))
length(levels(factor(data$.batchvar)))
if(length(levels(factor(data$.batchvar)) == 2)) {
# values <- values %>%
#   dplyr::mutate_at(.vars = dplyr::vars(.data$num, .data$den),
#                    .funs = ~purrr::map(.x = ., .f = ~.x %>%
#                                          dplyr::mutate(
#                                            probs = dplyr::if_else(
#                                              .data$.batchvar ==
#                                                levels(factor(.data$.batchvar))[1],
#                                              true = 1 - .data$value,
#                                              false = .data$value)) %>%
#                                          dplyr::pull(.data$probs)))
} else {
values <- values %>%
dplyr::mutate_at(.vars = dplyr::vars(.data$num, .data$den),
.funs =
~purrr::map(.x = .,
.f = ~.x %>%
tidyr::pivot_longer(-.data$.batchvar,
names_to = "batch",
values_to = "prob") %>%
dplyr::filter(.data$batch == .data$.batchvar) %>%
dplyr::pull(.data$prob)))
}
View(values)
View(values[[3]][[1]])
if(length(levels(factor(data$.batchvar))) == 2) {
values <- values %>%
dplyr::mutate_at(.vars = dplyr::vars(.data$num, .data$den),
.funs = ~purrr::map(.x = ., .f = ~.x %>%
dplyr::mutate(
probs = dplyr::if_else(
.data$.batchvar ==
levels(factor(.data$.batchvar))[1],
true = 1 - .data$value,
false = .data$value)) %>%
dplyr::pull(.data$probs)))
} else {
values <- values %>%
dplyr::mutate_at(.vars = dplyr::vars(.data$num, .data$den),
.funs =
~purrr::map(.x = .,
.f = ~.x %>%
tidyr::pivot_longer(-.data$.batchvar,
names_to = "batch",
values_to = "prob") %>%
dplyr::filter(.data$batch == .data$.batchvar) %>%
dplyr::pull(.data$prob)))
}
View(values)
values <- values
values <- values %>%
tidyr::unnest(cols = c(.data$data, .data$num, .data$den)) %>%
dplyr::mutate(sw = .data$num / .data$den,
trunc = dplyr::case_when(
.data$sw < stats::quantile(.data$sw, truncate[1]) ~
stats::quantile(.data$sw, truncate[1]),
.data$sw > stats::quantile(.data$sw, truncate[2]) ~
stats::quantile(.data$sw, truncate[2]),
TRUE ~ .data$sw))
View(values)
data_orig <- data
data <- data %>% dplyr::slice(1:20)
res <- data %>%
dplyr::rename(variable = dplyr::one_of(variable)) %>%
dplyr::filter(!is.na(.data$variable)) %>%
tidyr::nest(data = everything()) %>%
dplyr::mutate(
num = purrr::map(.x = .data$data,
.f = ~nnet::multinom(formula = .batchvar ~ 1,
data = .x, trace = FALSE)),
den = purrr::map(.x = .data$data,
.f = ~nnet::multinom(formula = stats::as.formula(
paste(".batchvar ~", confounders)),
data = .x, trace = FALSE)))
values <- res %>%
dplyr::mutate_at(.vars = dplyr::vars(.data$num, .data$den),
.funs = ~purrr::map(.x = ., .f = stats::predict, type = "probs") %>%
purrr::map(.x = ., .f = tibble::as_tibble) %>%
purrr::map2(.x = ., .y = .data$data,
.f = ~.x %>%
dplyr::mutate(.batchvar = .y %>%
purrr::pluck(".batchvar"))))
if(length(levels(factor(data$.batchvar))) == 2) {
values <- values %>%
dplyr::mutate_at(.vars = dplyr::vars(.data$num, .data$den),
.funs = ~purrr::map(.x = ., .f = ~.x %>%
dplyr::mutate(
probs = dplyr::if_else(
.data$.batchvar ==
levels(factor(.data$.batchvar))[1],
true = 1 - .data$value,
false = .data$value)) %>%
dplyr::pull(.data$probs)))
} else {
values <- values %>%
dplyr::mutate_at(.vars = dplyr::vars(.data$num, .data$den),
.funs =
~purrr::map(.x = .,
.f = ~.x %>%
tidyr::pivot_longer(-.data$.batchvar,
names_to = "batch",
values_to = "prob") %>%
dplyr::filter(.data$batch == .data$.batchvar) %>%
dplyr::pull(.data$prob)))
}
values <- values %>%
tidyr::unnest(cols = c(.data$data, .data$num, .data$den)) %>%
dplyr::mutate(sw = .data$num / .data$den,
trunc = dplyr::case_when(
.data$sw < stats::quantile(.data$sw, truncate[1]) ~
stats::quantile(.data$sw, truncate[1]),
.data$sw > stats::quantile(.data$sw, truncate[2]) ~
stats::quantile(.data$sw, truncate[2]),
TRUE ~ .data$sw))
View(values)
?fct_drop
devtools::load_all(".")
rm(data, res, values, confounders, truncate, variable)
adjust_batch(data = df %>% dplyr::slice(1:20), markers = biomarker, batch = tma, method = ipw, confounders = confo)
adjust_batch(data = df, markers = biomarker, batch = tma, method = ipw, confounders = confo)
?nnet::multinom
adjust_batch(data = df, markers = biomarker, batch = tma, method = ipw)
adjust_batch(data = df, markers = biomarker, batch = tma, method = standardize, confounders = confo)
adjust_batch(data = df, markers = biomarker, batch = tma, method = simple, confounders = confo)
adjust_batch(data = df, markers = biomarker, batch = tma, method = simple, confounders = confo) %>% diagnose_models()
adjust_batch(data = df, markers = biomarker, batch = tma, method = standardize, confounders = confo) %>% diagnose_models()
adjust_batch(data = df, markers = biomarker, batch = tma, method = ipw, confounders = confo) %>% diagnose_models()
adjust_batch(data = df, markers = biomarker, batch = tma, method = quantrefg, confounders = confo) %>% diagnose_models()
adjust_batch(data = df, markers = biomarker, batch = tma, method = quantreg, confounders = confo) %>% diagnose_models()
adjust_batch(data = df, markers = biomarker, batch = tma, method = quantnorm, confounders = confo) %>% diagnose_models()
batchmean_simple(df, markers = "biomarker")
batchmean_simple(df %>% dplyr::mutate(.id = 1:23, .batchvar = factor(tma)), markers = "biomarker")
batchmean_ipw(df %>% dplyr::mutate(.id = 1:23, .batchvar = factor(tma)), markers = "biomarker", confounders = "confo")
batchmean_standardize(df %>% dplyr::mutate(.id = 1:23, .batchvar = factor(tma)), markers = "biomarker", confounders = "confo")
devtools::load_all(".")
batchmean_standardize(df %>% dplyr::mutate(.id = 1:23, .batchvar = factor(tma)), markers = "biomarker", confounders = "confo")
adjust_batch(data = df, markers = biomarker, batch = tma, method = quantnorm, confounders = confo) %>% diagnose_models()
adjust_batch(data = df, markers = biomarker, batch = tma, method = standardize, confounders = confo) %>% diagnose_models()
adjust_batch(data = df, markers = biomarker, batch = tma, method = simple, confounders = confo) %>% diagnose_models()
adjust_batch(data = df, markers = biomarker, batch = tma, method = simple, confounders = confo)
devtools::load_all(".")
adjust_batch(data = df, markers = biomarker, batch = tma, method = simple, confounders = confo)
library(batchtma)
library(devtools)
library(pkgdown)
build_site()
?batchtma::adjust_batch
?log
library(devtools)
document()
library(batchtma)
?adjust_batch
df <- data.frame(tma = rep(1:2, times = 10),
biomarker = rep(1:2, times = 10) +
runif(max = 5, n = 20),
confounder = rep(0:1, times = 10) +
runif(max = 10, n = 20))
# Adjust for batch effects
# Using simple means, ignoring the confounder:
adjust_batch(data = df, markers = biomarker,
batch = tma, method = simple)
# Returns a data set with the new variable "biomarker_adj2"
# Using quantile regression and including the confounder:
adjust_batch(data = df, markers = biomarker,
batch = tma, method = quantreg,
confounders = confounder)
document()
library(batchtma)
?adjust_batch
?splines::`splines-package`
library(help = "splines")
v
ns(women$height, df = 5)
library(stats)
ns(women$height, df = 5)
splines::ns(women$height, df = 5)
attr(terms(fm1), "predvars")
summary(fm1 <- lm(weight ~ ns(height, df = 5), data = women))
summary(fm1 <- lm(weight ~ splines::ns(height, df = 5), data = women))
?splines
document()
library(batchtma)
?adjust_batch
document()
document()
library(batchtma)
?batchtma
??batchtma
?adjust_batch
df <- data.frame(tma = rep(1:2, times = 10),
biomarker = rep(1:2, times = 10) +
runif(max = 5, n = 20),
confounder = rep(0:1, times = 10) +
runif(max = 10, n = 20))
# Adjust for batch effects
# Using simple means, ignoring the confounder:
df2 <- adjust_batch(data = df, markers = biomarker,
batch = tma, method = simple)
# Model diagnostics:
diagnose_models(data = df2)
df <- data.frame(tma = rep(1:2, times = 10),
biomarker = rep(1:2, times = 10) +
runif(max = 5, n = 20),
confounder = rep(0:1, times = 10) +
runif(max = 10, n = 20))
# Adjust for batch effects
# Using simple means, ignoring the confounder:
df2 <- adjust_batch(data = df, markers = biomarker,
batch = tma, method = quantreg)
# Model diagnostics:
diagnose_models(data = df2)
library(pkgdown)
build_site()
use_vignette("diagnostics", title = "Advanced use: Model diagnostics")
build_site()
document()
build_site()
library(batchtma)
?diagnose_models
df <- data.frame(tma = rep(1:2, times = 10),
biomarker = rep(1:2, times = 10) +
runif(max = 5, n = 20),
confounder = rep(0:1, times = 10) +
runif(max = 10, n = 20))
# Adjust for batch effects
# Using simple means, ignoring the confounder:
df2 <- adjust_batch(data = df, markers = biomarker,
batch = tma, method = quantreg)
# Model diagnostics:
diagnose_models(data = df2)
diagnose_models(data = df2)$model_fits[[1]]$fitted_values
diagnose_models(data = df2)$model_fits[[1]]
diagnose_models(data = df2)$model_fits[[1]][[1]]
diagnose_models(data = df2)$model_fits[[1]][[1]]$fitted_values
tmp <- diagnose_models(data = df2)$model_fits[[1]][[1]]
View(tmp)
tmp <- diagnose_models(data = df2)$model_fits[[1]][[1]]$fitted.values
tmp <- diagnose_models(data = df2)$model_fits[[1]][[1]]$residuals
diagnose_models(data = df2)$model_fits[[1]][[1]]$residuals
residuals(diagnose_models(data = df2)$model_fits[[1]][[1]])
diagnose_models(df)
devtools::load_all(".")
diagnose_models(df)
diagnose_models(df2)
document()
document()
library(batchtma)
?batchtma
document()
build_site()
build_site()
build_site()
mean(c(1, 5, 2, 3))
