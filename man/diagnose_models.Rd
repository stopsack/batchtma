% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/diagnose_models.R
\name{diagnose_models}
\alias{diagnose_models}
\title{Model diagnostics after batch adjustment}
\usage{
diagnose_models(data)
}
\arguments{
\item{data}{Batch-adjusted dataset}
}
\value{
List:
\itemize{
\item \code{adjust_method} Method used for batch adjustment
(see \code{\link[batchtma]{adjust_batch}}).
\item \code{markers} Variables of biomarkers for adjustment
\item \code{suffix} Suffix appended to variable names
\item \code{batchvar} Variable indicating batch
\item \code{confounders} Confounders, i.e. determinants of
biomarker levels that differ between batches.
Returned only if used by the model.
\item \code{adjust_parameters} Tibble of parameters used to
obtain adjust biomarker levels. Parameters differ between
methods. Note that \code{method = quantnorm} does not
fit regression models and return parameters, and that
\code{method = simple} only returns simple means
as parameters and no regression models.
\item \code{model_fits} List of model fit objects, one
per biomarker.
}
}
\description{
After \code{\link[batchtma]{adjust_batch}} has performed
adjustment for batch effects, \code{diagnose_models}
provides an overview of parameters and adjustment models.
Information is only available about the most recent
run of \code{\link[batchtma]{adjust_batch}} on a dataset.
}
\examples{
# Data frame with two batches
# Batch 2 has higher values of biomarker and confounder
df <- data.frame(tma = rep(1:2, times = 10),
                 biomarker = rep(1:2, times = 10) +
                   runif(max = 5, n = 20),
                 confounder = rep(0:1, times = 10) +
                   runif(max = 10, n = 20))

# Adjust for batch effects
df2 <- adjust_batch(data = df, markers = biomarker,
                    batch = tma, method = quantreg,
                    confounders = confounder)

# Show overview of model diagnostics:
diagnose_models(data = df2)

# Obtain first fitted regression model:
fit <- diagnose_models(data = df2)$model_fits[[1]][[1]]

# Obtain residuals for this model:
residuals(fit)
}
